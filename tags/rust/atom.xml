<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
    <title>Tung&#x27;s Word Box - rust</title>
    <subtitle>Programming, game development and other technical tidbits</subtitle>
    <link rel="self" type="application/atom+xml" href="https://tung.github.io/tags/rust/atom.xml"/>
    <link rel="alternate" type="text/html" href="https://tung.github.io"/>
    <generator uri="https://www.getzola.org/">Zola</generator>
    <updated>2025-03-19T00:00:00+00:00</updated>
    <id>https://tung.github.io/tags/rust/atom.xml</id>
    <entry xml:lang="en">
        <title>Multi-Threaded Rust Ray Tracing Demo</title>
        <published>2025-03-19T00:00:00+00:00</published>
        <updated>2025-03-19T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              tungtn
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://tung.github.io/posts/multi-threaded-rust-ray-tracing-demo/"/>
        <id>https://tung.github.io/posts/multi-threaded-rust-ray-tracing-demo/</id>
        
        <summary type="html">
&lt;figure&gt;
  &lt;a href=&quot;&amp;#x2F;posts&amp;#x2F;multi-threaded-rust-ray-tracing-demo&amp;#x2F;ray-tracing.png&quot;&gt;&lt;img src=&quot;https:&amp;#x2F;&amp;#x2F;tung.github.io&amp;#x2F;processed_images&amp;#x2F;ray-tracing.25c002aa6a97723f.png&quot; alt=&quot;Ray-traced scene with spheres rendered with multi-threaded Rust&quot; title=&quot;Ray-traced scene with spheres rendered with multi-threaded Rust&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;figure&gt;
&lt;p&gt;&lt;a href=&quot;https:&#x2F;&#x2F;raytracing.github.io&#x2F;books&#x2F;RayTracingInOneWeekend.html&quot;&gt;&lt;em&gt;Ray Tracing in One Weekend&lt;&#x2F;em&gt;&lt;&#x2F;a&gt; is a free online book that takes you through the process of programming a ray tracer from scratch.
It starts by writing support code to do math with 3-element vectors, building up a 3D scene with spheres and adding materials, and finishing by rendering a large scene of spheres of various sizes and materials.&lt;&#x2F;p&gt;
&lt;p&gt;The book provides source code in C++, which I followed directly my first time through.
Having done that, I decided to get a little bolder and repeat the experiment with Rust.
This went well enough that I went even further and added multi-threading to speed it up;
the picture above is the result of letting this multi-threaded renderer run for a while.&lt;&#x2F;p&gt;
&lt;p&gt;Anyway, this ended up being interesting enough to do a write-up about, so here it is;
read on!&lt;&#x2F;p&gt;
</summary>
        
    </entry>
    <entry xml:lang="en">
        <title>Announcing Coric&#x27;s Quest</title>
        <published>2024-08-24T00:00:00+00:00</published>
        <updated>2024-08-24T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              tungtn
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://tung.github.io/posts/announcing-corics-quest/"/>
        <id>https://tung.github.io/posts/announcing-corics-quest/</id>
        
        <content type="html" xml:base="https://tung.github.io/posts/announcing-corics-quest/">
&lt;figure&gt;
  &lt;a href=&quot;&amp;#x2F;projects&amp;#x2F;corics-quest&amp;#x2F;corics-quest-screenshot.png&quot;&gt;&lt;img src=&quot;https:&amp;#x2F;&amp;#x2F;tung.github.io&amp;#x2F;processed_images&amp;#x2F;corics-quest-screenshot.64c73d95ddb3c347.png&quot; alt=&quot;Coric&amp;amp;#x27;s Quest screenshot&quot; title=&quot;Coric&amp;amp;#x27;s Quest screenshot&quot;&gt;&lt;&#x2F;a&gt;
&lt;&#x2F;figure&gt;
&lt;p&gt;So here&#x27;s the game I&#x27;ve been working on the the last six months: &lt;em&gt;Coric&#x27;s Quest&lt;&#x2F;em&gt;!
It&#x27;s a free and open source RPG that fits about two hours of game play into a single 9 MB file.
There are native builds for Windows and Linux, and a WebAssembly build that can be played in a web browser.&lt;&#x2F;p&gt;
&lt;p&gt;You can play it right now at &lt;a href=&quot;https:&#x2F;&#x2F;tungtn.itch.io&#x2F;corics-quest&quot;&gt;itch.io&lt;&#x2F;a&gt; and on its &lt;a href=&quot;https:&#x2F;&#x2F;tung.github.io&#x2F;corics-quest&#x2F;&quot;&gt;homepage&lt;&#x2F;a&gt;.
The source code can be found &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;tung&#x2F;corics-quest&quot;&gt;on GitHub&lt;&#x2F;a&gt;.
There&#x27;s also a &lt;a href=&quot;https:&#x2F;&#x2F;tung.github.io&#x2F;projects&#x2F;corics-quest&#x2F;&quot;&gt;project page&lt;&#x2F;a&gt; here on this site.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Rust and WebAssembly without a Bundler</title>
        <published>2022-08-04T00:00:00+00:00</published>
        <updated>2022-08-06T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              tungtn
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://tung.github.io/posts/rust-and-webassembly-without-a-bundler/"/>
        <id>https://tung.github.io/posts/rust-and-webassembly-without-a-bundler/</id>
        
        <summary type="html">&lt;p&gt;If you&#x27;re just getting into compiling your Rust code into WebAssembly and want to load it in a web browser, you might be taken aback by the multitude of ways of doing so.
This seems to be due to the differing pace of web browsers implementing web platform features over the years.
A lot of entry-level guides to using Rust and WebAssembly make use of a JavaScript bundler for convenience, but this obscures the relationship between Rust, WebAssembly, JavaScript and HTML, so instead we&#x27;re going to try doing this all by hand.
Specifically, we&#x27;re going to compile some Rust code into WebAssembly and do a run-down of the ways to load it directly in a web page using just JavaScript.
If you want to follow along at home, make sure you have Rust installed and the &lt;code&gt;wasm32-unknown-unknown&lt;&#x2F;code&gt; target:&lt;&#x2F;p&gt;
&lt;pre class=&quot;z-code&quot;&gt;&lt;code&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;rustup target add wasm32-unknown-unknown
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We&#x27;re going to look at these loading methods through the perspective of compatibility with three desktop web browsers: Chrome, Firefox and Safari.
I&#x27;ll be consulting the extremely-helpful &lt;a href=&quot;https:&#x2F;&#x2F;caniuse.com&quot;&gt;Can I use&lt;&#x2F;a&gt; website for this info.&lt;&#x2F;p&gt;
&lt;p&gt;Ready?
Okay, let&#x27;s go!&lt;&#x2F;p&gt;
</summary>
        
    </entry>
</feed>

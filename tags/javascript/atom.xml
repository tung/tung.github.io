<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
    <title>Tung&#x27;s Word Box - javascript</title>
    <subtitle>Programming, game development and other technical tidbits</subtitle>
    <link rel="self" type="application/atom+xml" href="https://tung.github.io/tags/javascript/atom.xml"/>
    <link rel="alternate" type="text/html" href="https://tung.github.io"/>
    <generator uri="https://www.getzola.org/">Zola</generator>
    <updated>2022-08-06T00:00:00+00:00</updated>
    <id>https://tung.github.io/tags/javascript/atom.xml</id>
    <entry xml:lang="en">
        <title>Rust and WebAssembly without a Bundler</title>
        <published>2022-08-04T00:00:00+00:00</published>
        <updated>2022-08-06T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              tungtn
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://tung.github.io/posts/rust-and-webassembly-without-a-bundler/"/>
        <id>https://tung.github.io/posts/rust-and-webassembly-without-a-bundler/</id>
        
        <summary type="html">&lt;p&gt;If you&#x27;re just getting into compiling your Rust code into WebAssembly and want to load it in a web browser, you might be taken aback by the multitude of ways of doing so.
This seems to be due to the differing pace of web browsers implementing web platform features over the years.
A lot of entry-level guides to using Rust and WebAssembly make use of a JavaScript bundler for convenience, but this obscures the relationship between Rust, WebAssembly, JavaScript and HTML, so instead we&#x27;re going to try doing this all by hand.
Specifically, we&#x27;re going to compile some Rust code into WebAssembly and do a run-down of the ways to load it directly in a web page using just JavaScript.
If you want to follow along at home, make sure you have Rust installed and the &lt;code&gt;wasm32-unknown-unknown&lt;&#x2F;code&gt; target:&lt;&#x2F;p&gt;
&lt;pre class=&quot;z-code&quot;&gt;&lt;code&gt;&lt;span class=&quot;z-text z-plain&quot;&gt;rustup target add wasm32-unknown-unknown
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;We&#x27;re going to look at these loading methods through the perspective of compatibility with three desktop web browsers: Chrome, Firefox and Safari.
I&#x27;ll be consulting the extremely-helpful &lt;a href=&quot;https:&#x2F;&#x2F;caniuse.com&quot;&gt;Can I use&lt;&#x2F;a&gt; website for this info.&lt;&#x2F;p&gt;
&lt;p&gt;Ready?
Okay, let&#x27;s go!&lt;&#x2F;p&gt;
</summary>
        
    </entry>
</feed>
